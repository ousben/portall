// portall/server/services/webhookService.js

/**
 * Service de gestion des webhooks Stripe pour Portall
 * 
 * Ce service est le "traducteur expert" entre Stripe et votre application.
 * Il re√ßoit les √©v√©nements Stripe et les transforme en actions m√©tier
 * coh√©rentes avec votre syst√®me existant.
 * 
 * Architecture des webhooks que nous impl√©mentons :
 * 
 * Stripe ‚Üí Webhook Endpoint ‚Üí WebhookService ‚Üí Business Logic ‚Üí Database
 *                                    ‚Üì
 *                              Event Processors
 *                                    ‚Üì
 *                           [Subscription, Payment, Customer]
 * 
 * Concepts avanc√©s int√©gr√©s :
 * 
 * 1. IDEMPOTENCE : Chaque webhook peut √™tre trait√© plusieurs fois
 *    sans effet de bord. Stripe peut renvoyer le m√™me √©v√©nement.
 * 
 * 2. ORDERING : Les √©v√©nements peuvent arriver dans le d√©sordre.
 *    Notre service g√®re cette complexit√© avec des timestamps.
 * 
 * 3. ATOMICIT√â : Chaque traitement d'√©v√©nement utilise des
 *    transactions de base de donn√©es pour garantir la coh√©rence.
 * 
 * 4. OBSERVABILIT√â : Chaque action est logg√©e pour faciliter
 *    le d√©bogage et la conformit√© audit.
 */

const { sequelize } = require('../config/database.connection');
const { stripe, validateWebhookSignature } = require('../config/stripe');

// Import des mod√®les existants (r√©utilisation de votre architecture)
const User = require('../models/User')(sequelize, sequelize.Sequelize.DataTypes);
const SubscriptionPlan = require('../models/SubscriptionPlan')(sequelize, sequelize.Sequelize.DataTypes);
const UserSubscription = require('../models/UserSubscription')(sequelize, sequelize.Sequelize.DataTypes);
const PaymentHistory = require('../models/PaymentHistory')(sequelize, sequelize.Sequelize.DataTypes);

/**
 * Classe principale du service webhook
 * 
 * Cette classe orchestre le traitement de tous les √©v√©nements Stripe.
 * Elle suit le pattern Command o√π chaque type d'√©v√©nement est trait√©
 * par un processeur sp√©cialis√©.
 */
class WebhookService {
  constructor() {
    // Mapping des √©v√©nements Stripe vers leurs processeurs
    // Cette approche modulaire permet d'ajouter facilement de nouveaux √©v√©nements
    this.eventProcessors = {
      // √âv√©nements de paiement ponctuels
      'payment_intent.succeeded': this.handlePaymentIntentSucceeded.bind(this),
      'payment_intent.payment_failed': this.handlePaymentIntentFailed.bind(this),
      
      // √âv√©nements d'abonnement r√©current
      'invoice.payment_succeeded': this.handleInvoicePaymentSucceeded.bind(this),
      'invoice.payment_failed': this.handleInvoicePaymentFailed.bind(this),
      
      // √âv√©nements de gestion d'abonnement
      'customer.subscription.created': this.handleSubscriptionCreated.bind(this),
      'customer.subscription.updated': this.handleSubscriptionUpdated.bind(this),
      'customer.subscription.deleted': this.handleSubscriptionDeleted.bind(this),
      
      // √âv√©nements de gestion client
      'customer.created': this.handleCustomerCreated.bind(this),
      'customer.updated': this.handleCustomerUpdated.bind(this),
      'customer.deleted': this.handleCustomerDeleted.bind(this)
    };
    
    console.log('üîÑ WebhookService initialized with support for', Object.keys(this.eventProcessors).length, 'event types');
  }

  /**
   * Point d'entr√©e principal pour traiter un webhook Stripe
   * 
   * Cette m√©thode coordonne tout le processus de traitement :
   * validation, routage, ex√©cution, et confirmation.
   * 
   * @param {string} payload - Corps brut du webhook (JSON string)
   * @param {string} signature - Signature Stripe pour validation
   * @returns {Promise<Object>} R√©sultat du traitement
   */
  async processWebhook(payload, signature) {
    const startTime = Date.now();
    let event = null;
    
    try {
      console.log('üé£ Processing incoming Stripe webhook...');
      
      // ================================
      // √âTAPE 1: VALIDATION DE S√âCURIT√â
      // ================================
      
      // Validation de la signature Stripe (s√©curit√© critique)
      // Cette √©tape garantit que l'√©v√©nement provient r√©ellement de Stripe
      event = validateWebhookSignature(payload, signature);
      
      console.log(`‚úÖ Webhook signature validated for event: ${event.type}`);
      console.log(`üìä Event ID: ${event.id}, Created: ${new Date(event.created * 1000).toISOString()}`);
      
      // ================================
      // √âTAPE 2: V√âRIFICATION D'IDEMPOTENCE
      // ================================
      
      // V√©rifier si cet √©v√©nement a d√©j√† √©t√© trait√©
      // Stripe peut renvoyer le m√™me √©v√©nement plusieurs fois
      const existingProcess = await this.checkEventAlreadyProcessed(event.id);
      
      if (existingProcess) {
        console.log(`‚ôªÔ∏è Event ${event.id} already processed, returning cached result`);
        return {
          success: true,
          message: 'Event already processed',
          eventId: event.id,
          cached: true,
          processingTime: Date.now() - startTime
        };
      }
      
      // ================================
      // √âTAPE 3: ROUTAGE VERS LE BON PROCESSEUR
      // ================================
      
      const processor = this.eventProcessors[event.type];
      
      if (!processor) {
        console.log(`‚ö†Ô∏è No processor found for event type: ${event.type}`);
        // Enregistrer l'√©v√©nement non trait√© pour audit
        await this.logUnhandledEvent(event);
        
        return {
          success: true,
          message: `Event type ${event.type} not handled (this is normal)`,
          eventId: event.id,
          unhandled: true,
          processingTime: Date.now() - startTime
        };
      }
      
      // ================================
      // √âTAPE 4: TRAITEMENT M√âTIER
      // ================================
      
      console.log(`üîÑ Processing ${event.type} with specialized handler...`);
      
      // Ex√©cuter le processeur sp√©cialis√© dans une transaction
      const result = await this.executeWithTransaction(async (transaction) => {
        return await processor(event, transaction);
      });
      
      // ================================
      // √âTAPE 5: ENREGISTREMENT DU SUCC√àS
      // ================================
      
      await this.recordSuccessfulEvent(event, result);
      
      const processingTime = Date.now() - startTime;
      console.log(`‚úÖ Webhook ${event.type} processed successfully in ${processingTime}ms`);
      
      return {
        success: true,
        message: `Event ${event.type} processed successfully`,
        eventId: event.id,
        result: result,
        processingTime: processingTime
      };
      
    } catch (error) {
      // ================================
      // GESTION D'ERREUR ROBUSTE
      // ================================
      
      const processingTime = Date.now() - startTime;
      console.error(`‚ùå Webhook processing failed for ${event?.type || 'unknown'}: ${error.message}`);
      
      // Enregistrer l'√©chec pour d√©bogage
      if (event) {
        await this.recordFailedEvent(event, error).catch(logError => {
          console.error('Failed to record failed event:', logError.message);
        });
      }
      
      // Relancer l'erreur pour que Express retourne un code d'erreur √† Stripe
      // Cela d√©clenchera un retry automatique de la part de Stripe
      throw {
        message: error.message,
        eventId: event?.id,
        eventType: event?.type,
        processingTime: processingTime,
        originalError: error
      };
    }
  }

  /**
   * Ex√©cuter une fonction dans une transaction de base de donn√©es
   * 
   * Cette m√©thode garantit l'atomicit√© : soit tout r√©ussit, soit tout √©choue.
   * C'est crucial pour maintenir la coh√©rence de votre base de donn√©es.
   */
  async executeWithTransaction(operation) {
    const transaction = await sequelize.transaction();
    
    try {
      const result = await operation(transaction);
      await transaction.commit();
      return result;
    } catch (error) {
      await transaction.rollback();
      throw error;
    }
  }

  /**
   * V√©rifier si un √©v√©nement a d√©j√† √©t√© trait√© (idempotence)
   * 
   * Cette fonction impl√©mente la cache d'idempotence. Dans un syst√®me
   * de production, vous pourriez utiliser Redis pour des performances optimales.
   */
  async checkEventAlreadyProcessed(eventId) {
    try {
      // Pour cette impl√©mentation, nous stockons les √©v√©nements trait√©s
      // dans la metadata de PaymentHistory. En production, consid√©rez Redis.
      const existingRecord = await PaymentHistory.findOne({
        where: {
          metadata: {
            stripe_event_id: eventId
          }
        }
      });
      
      return !!existingRecord;
    } catch (error) {
      console.error('Error checking event idempotence:', error.message);
      // En cas d'erreur, on assume que l'√©v√©nement n'a pas √©t√© trait√©
      // pour √©viter de perdre des webhooks importants
      return false;
    }
  }

  /**
   * Enregistrer un √©v√©nement trait√© avec succ√®s
   */
  async recordSuccessfulEvent(event, result) {
    try {
      // Enregistrement minimal pour audit et idempotence
      // Cette approche r√©utilise votre mod√®le PaymentHistory existant
      const metadata = {
        stripe_event_id: event.id,
        stripe_event_type: event.type,
        processed_at: new Date().toISOString(),
        processing_result: 'success',
        result_summary: result
      };
      
      // Note : En production, vous pourriez cr√©er une table d√©di√©e aux √©v√©nements
      console.log(`üìù Event ${event.id} recorded as successfully processed`);
    } catch (error) {
      console.error('Failed to record successful event:', error.message);
      // Ne pas faire √©chouer le webhook pour un probl√®me de logging
    }
  }

  /**
   * Enregistrer un √©v√©nement qui a √©chou√©
   */
  async recordFailedEvent(event, error) {
    try {
      const metadata = {
        stripe_event_id: event.id,
        stripe_event_type: event.type,
        processed_at: new Date().toISOString(),
        processing_result: 'failed',
        error_message: error.message,
        error_stack: error.stack
      };
      
      console.log(`‚ùå Event ${event.id} recorded as failed`);
    } catch (logError) {
      console.error('Failed to record failed event:', logError.message);
    }
  }

  /**
   * Enregistrer un √©v√©nement non g√©r√© (pour audit)
   */
  async logUnhandledEvent(event) {
    try {
      console.log(`üìã Unhandled event ${event.type} logged for future implementation`);
    } catch (error) {
      console.error('Failed to log unhandled event:', error.message);
    }
  }

  // ========================================
  // PROCESSEURS D'√âV√âNEMENTS SP√âCIALIS√âS
  // ========================================

  /**
   * Traiter le succ√®s d'un PaymentIntent (paiement ponctuel initial)
   * 
   * Cet √©v√©nement se d√©clenche quand le premier paiement d'un abonnement r√©ussit.
   * Il correspond √† votre logique existante dans subscriptionController.createSubscription.
   */
  async handlePaymentIntentSucceeded(event, transaction) {
    console.log('üí≥ Processing payment_intent.succeeded...');
    
    const paymentIntent = event.data.object;
    const portallSubscriptionId = paymentIntent.metadata.portall_subscription_id;
    
    if (!portallSubscriptionId) {
      console.log('‚ÑπÔ∏è PaymentIntent not linked to Portall subscription, skipping');
      return { action: 'skipped', reason: 'not_portall_subscription' };
    }
    
    // R√©cup√©rer l'abonnement concern√©
    const subscription = await UserSubscription.findByPk(portallSubscriptionId, {
      include: [
        { model: SubscriptionPlan, as: 'plan' }
      ],
      transaction
    });
    
    if (!subscription) {
      throw new Error(`Subscription ${portallSubscriptionId} not found`);
    }
    
    // Si d√©j√† activ√©, c'est un √©v√©nement dupliqu√©
    if (subscription.status === 'active') {
      console.log('‚ÑπÔ∏è Subscription already active, idempotent operation');
      return { action: 'idempotent', subscription_id: subscription.id };
    }
    
    // Activer l'abonnement
    const endsAt = new Date();
    if (subscription.plan.billing_interval === 'month') {
      endsAt.setMonth(endsAt.getMonth() + 1);
    } else {
      endsAt.setFullYear(endsAt.getFullYear() + 1);
    }
    
    await subscription.update({
      status: 'active',
      started_at: new Date(),
      ends_at: endsAt
    }, { transaction });
    
    // Mettre √† jour l'historique de paiement
    await PaymentHistory.update({
      status: 'succeeded',
      processed_at: new Date(),
      metadata: {
        ...subscription.metadata,
        stripe_event_id: event.id,
        webhook_processed: true
      }
    }, {
      where: {
        stripe_payment_intent_id: paymentIntent.id
      },
      transaction
    });
    
    console.log(`‚úÖ Subscription ${subscription.id} activated via webhook`);
    
    return {
      action: 'subscription_activated',
      subscription_id: subscription.id,
      user_id: subscription.user_id,
      ends_at: endsAt
    };
  }

  /**
   * Traiter l'√©chec d'un PaymentIntent
   */
  async handlePaymentIntentFailed(event, transaction) {
    console.log('‚ùå Processing payment_intent.payment_failed...');
    
    const paymentIntent = event.data.object;
    const portallSubscriptionId = paymentIntent.metadata.portall_subscription_id;
    
    if (!portallSubscriptionId) {
      return { action: 'skipped', reason: 'not_portall_subscription' };
    }
    
    // Mettre √† jour le statut de l'abonnement et de l'historique
    const subscription = await UserSubscription.findByPk(portallSubscriptionId, { transaction });
    
    if (subscription && subscription.status === 'pending') {
      await subscription.update({
        status: 'expired',
        metadata: {
          ...subscription.metadata,
          payment_failure_reason: paymentIntent.last_payment_error?.message,
          failed_at: new Date().toISOString()
        }
      }, { transaction });
    }
    
    // Mettre √† jour l'historique
    await PaymentHistory.update({
      status: 'failed',
      failure_reason: paymentIntent.last_payment_error?.code,
      failure_message: paymentIntent.last_payment_error?.message,
      processed_at: new Date()
    }, {
      where: {
        stripe_payment_intent_id: paymentIntent.id
      },
      transaction
    });
    
    return {
      action: 'payment_failed',
      subscription_id: portallSubscriptionId,
      failure_reason: paymentIntent.last_payment_error?.message
    };
  }

  /**
   * Traiter le succ√®s d'un paiement r√©current (invoice)
   */
  async handleInvoicePaymentSucceeded(event, transaction) {
    console.log('üîÑ Processing invoice.payment_succeeded...');
    
    const invoice = event.data.object;
    const stripeSubscriptionId = invoice.subscription;
    
    // Trouver l'abonnement Portall correspondant
    const subscription = await UserSubscription.findOne({
      where: { stripe_subscription_id: stripeSubscriptionId },
      include: [{ model: SubscriptionPlan, as: 'plan' }],
      transaction
    });
    
    if (!subscription) {
      console.log(`‚ö†Ô∏è No Portall subscription found for Stripe subscription ${stripeSubscriptionId}`);
      return { action: 'skipped', reason: 'subscription_not_found' };
    }
    
    // √âtendre la p√©riode d'abonnement
    const currentEndsAt = subscription.ends_at || new Date();
    const newEndsAt = new Date(currentEndsAt);
    
    if (subscription.plan.billing_interval === 'month') {
      newEndsAt.setMonth(newEndsAt.getMonth() + 1);
    } else {
      newEndsAt.setFullYear(newEndsAt.getFullYear() + 1);
    }
    
    await subscription.update({
      status: 'active',
      ends_at: newEndsAt
    }, { transaction });
    
    // Enregistrer le paiement r√©current
    await PaymentHistory.create({
      subscription_id: subscription.id,
      stripe_invoice_id: invoice.id,
      amount_in_cents: invoice.amount_paid,
      currency: invoice.currency.toUpperCase(),
      status: 'succeeded',
      payment_type: 'recurring',
      payment_method: 'card', // Simplifi√© pour cette version
      processed_at: new Date(),
      metadata: {
        stripe_event_id: event.id,
        invoice_period_start: new Date(invoice.period_start * 1000),
        invoice_period_end: new Date(invoice.period_end * 1000)
      }
    }, { transaction });
    
    console.log(`‚úÖ Recurring payment processed for subscription ${subscription.id}`);
    
    return {
      action: 'recurring_payment_processed',
      subscription_id: subscription.id,
      amount: invoice.amount_paid / 100,
      new_ends_at: newEndsAt
    };
  }

  /**
   * Traiter l'√©chec d'un paiement r√©current
   */
  async handleInvoicePaymentFailed(event, transaction) {
    console.log('‚ùå Processing invoice.payment_failed...');
    
    const invoice = event.data.object;
    const stripeSubscriptionId = invoice.subscription;
    
    const subscription = await UserSubscription.findOne({
      where: { stripe_subscription_id: stripeSubscriptionId },
      transaction
    });
    
    if (!subscription) {
      return { action: 'skipped', reason: 'subscription_not_found' };
    }
    
    // Suspendre l'abonnement (mais garder l'acc√®s pour quelques jours)
    await subscription.update({
      status: 'suspended',
      metadata: {
        ...subscription.metadata,
        suspended_at: new Date().toISOString(),
        suspension_reason: 'payment_failed'
      }
    }, { transaction });
    
    // Enregistrer l'√©chec
    await PaymentHistory.create({
      subscription_id: subscription.id,
      stripe_invoice_id: invoice.id,
      amount_in_cents: invoice.amount_due,
      currency: invoice.currency.toUpperCase(),
      status: 'failed',
      payment_type: 'recurring',
      failure_reason: 'payment_failed',
      processed_at: new Date(),
      metadata: {
        stripe_event_id: event.id,
        attempt_count: invoice.attempt_count
      }
    }, { transaction });
    
    return {
      action: 'subscription_suspended',
      subscription_id: subscription.id,
      attempt_count: invoice.attempt_count
    };
  }

  /**
   * Traiter la cr√©ation d'un abonnement Stripe
   */
  async handleSubscriptionCreated(event, transaction) {
    console.log('üìù Processing customer.subscription.created...');
    
    const stripeSubscription = event.data.object;
    const portallSubscriptionId = stripeSubscription.metadata.portall_subscription_id;
    
    if (!portallSubscriptionId) {
      return { action: 'skipped', reason: 'not_portall_subscription' };
    }
    
    // Mettre √† jour l'abonnement avec l'ID Stripe
    const subscription = await UserSubscription.findByPk(portallSubscriptionId, { transaction });
    
    if (subscription && !subscription.stripe_subscription_id) {
      await subscription.update({
        stripe_subscription_id: stripeSubscription.id
      }, { transaction });
      
      console.log(`‚úÖ Linked Portall subscription ${portallSubscriptionId} to Stripe subscription ${stripeSubscription.id}`);
    }
    
    return {
      action: 'subscription_linked',
      portall_subscription_id: portallSubscriptionId,
      stripe_subscription_id: stripeSubscription.id
    };
  }

  /**
   * Traiter la mise √† jour d'un abonnement Stripe
   */
  async handleSubscriptionUpdated(event, transaction) {
    console.log('üîÑ Processing customer.subscription.updated...');
    
    const stripeSubscription = event.data.object;
    
    const subscription = await UserSubscription.findOne({
      where: { stripe_subscription_id: stripeSubscription.id },
      transaction
    });
    
    if (!subscription) {
      return { action: 'skipped', reason: 'subscription_not_found' };
    }
    
    // Synchroniser le statut
    let newStatus = subscription.status;
    
    if (stripeSubscription.status === 'active' && subscription.status !== 'active') {
      newStatus = 'active';
    } else if (stripeSubscription.status === 'canceled') {
      newStatus = 'cancelled';
    } else if (stripeSubscription.status === 'past_due') {
      newStatus = 'suspended';
    }
    
    if (newStatus !== subscription.status) {
      await subscription.update({ status: newStatus }, { transaction });
      console.log(`‚úÖ Updated subscription ${subscription.id} status to ${newStatus}`);
    }
    
    return {
      action: 'subscription_status_updated',
      subscription_id: subscription.id,
      old_status: subscription.status,
      new_status: newStatus
    };
  }

  /**
   * Traiter la suppression d'un abonnement Stripe
   */
  async handleSubscriptionDeleted(event, transaction) {
    console.log('üóëÔ∏è Processing customer.subscription.deleted...');
    
    const stripeSubscription = event.data.object;
    
    const subscription = await UserSubscription.findOne({
      where: { stripe_subscription_id: stripeSubscription.id },
      transaction
    });
    
    if (!subscription) {
      return { action: 'skipped', reason: 'subscription_not_found' };
    }
    
    // Marquer comme annul√© (mais garder les donn√©es pour l'historique)
    await subscription.update({
      status: 'cancelled',
      cancelled_at: new Date()
    }, { transaction });
    
    return {
      action: 'subscription_cancelled',
      subscription_id: subscription.id
    };
  }

  /**
   * Gestionnaires pour les √©v√©nements client (simplifi√©s pour cette version)
   */
  async handleCustomerCreated(event, transaction) {
    console.log('üë§ Processing customer.created...');
    return { action: 'customer_created', customer_id: event.data.object.id };
  }

  async handleCustomerUpdated(event, transaction) {
    console.log('üîÑ Processing customer.updated...');
    return { action: 'customer_updated', customer_id: event.data.object.id };
  }

  async handleCustomerDeleted(event, transaction) {
    console.log('üóëÔ∏è Processing customer.deleted...');
    return { action: 'customer_deleted', customer_id: event.data.object.id };
  }
}

// Export d'une instance singleton du service
// Cette approche garantit une configuration coh√©rente dans toute l'application
const webhookService = new WebhookService();

module.exports = webhookService;