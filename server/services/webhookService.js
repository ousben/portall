// portall/server/services/webhookService.js

/**
 * Service de gestion des webhooks Stripe pour Portall
 * 
 * Ce service est le "traducteur" entre Stripe et votre application Portall.
 * Quand Stripe veut vous dire "un paiement a r√©ussi" ou "un abonnement a √©t√© annul√©",
 * il envoie un webhook √† ce service qui traduit cette information en actions
 * concr√®tes dans votre base de donn√©es.
 * 
 * CHANGEMENT PRINCIPAL DANS CETTE VERSION :
 * Nous utilisons maintenant le syst√®me d'associations Sequelize au lieu d'importer
 * chaque mod√®le s√©par√©ment. C'est comme prendre un kit LEGO complet avec 
 * les instructions d'assemblage, au lieu d'acheter chaque pi√®ce individuellement.
 */

const { sequelize } = require('../config/database.connection');
const { stripe, validateWebhookSignature } = require('../config/stripe');

// ‚úÖ CHANGEMENT CRITIQUE : Au lieu d'importer chaque mod√®le s√©par√©ment...
// const User = require('../models/User')(sequelize, sequelize.Sequelize.DataTypes);
// const SubscriptionPlan = require('../models/SubscriptionPlan')(sequelize, sequelize.Sequelize.DataTypes);
// ... (ce qui cassait les associations)

// ‚úÖ NOUVELLE APPROCHE : Nous importons le syst√®me complet avec toutes les connexions
const db = require('../models'); // Ceci charge TOUS les mod√®les ET leurs relations

// Maintenant nous extrayons les mod√®les qui ont leurs associations fonctionnelles
const { User, SubscriptionPlan, UserSubscription, PaymentHistory } = db;

/**
 * Classe principale qui g√®re tous les webhooks de Stripe
 * 
 * Cette classe suit un pattern simple : pour chaque type d'√©v√©nement Stripe,
 * nous avons une m√©thode sp√©cialis√©e qui sait exactement quoi faire.
 * C'est comme avoir un r√©ceptionniste expert qui sait vers quel d√©partement
 * diriger chaque type de visiteur.
 */
class WebhookService {

  /**
   * M√©thode principale : traite n'importe quel webhook de Stripe
   * 
   * Cette m√©thode fait trois choses importantes :
   * 1. V√©rifie que le webhook vient vraiment de Stripe (s√©curit√©)
   * 2. D√©termine quel type d'√©v√©nement c'est
   * 3. Appelle la bonne m√©thode pour le traiter
   * 
   * Pensez √† cela comme le bureau d'accueil d'un h√¥pital : il re√ßoit tous
   * les patients, v√©rifie leur identit√©, et les dirige vers le bon service.
   */
  async processWebhook(payload, signature) {
    console.log('üé£ D√©but du traitement du webhook...');
    
    try {
      // √âtape 1 : V√©rifier que ce webhook vient vraiment de Stripe
      // (comme v√©rifier une pi√®ce d'identit√©)
      const event = validateWebhookSignature(payload, signature);
      console.log(`üì® Traitement de l'√©v√©nement : ${event.type} (ID: ${event.id})`);
      
      // √âtape 2 : Traiter l'√©v√©nement dans une transaction de base de donn√©es
      // Une transaction garantit que soit tout r√©ussit, soit rien ne change
      // C'est comme un contrat : soit toutes les conditions sont remplies, soit on annule tout
      const result = await sequelize.transaction(async (transaction) => {
        return await this.routeEvent(event, transaction);
      });
      
      console.log('‚úÖ Webhook trait√© avec succ√®s :', result);
      return { status: 'success', result };
      
    } catch (error) {
      console.error('‚ùå Erreur lors du traitement du webhook :', error.message);
      throw error;
    }
  }

  /**
   * M√©thode qui d√©cide quel processeur utiliser selon le type d'√©v√©nement
   * 
   * C'est comme un aiguilleur de train : selon la destination (type d'√©v√©nement),
   * il dirige vers la bonne voie (m√©thode de traitement).
   */
  async routeEvent(event, transaction) {
    console.log(`üîÄ Redirection de l'√©v√©nement : ${event.type}`);
    
    // Dictionnaire qui associe chaque type d'√©v√©nement √† sa m√©thode de traitement
    const eventHandlers = {
      // √âv√©nements de paiement ponctuel
      'payment_intent.succeeded': () => this.handlePaymentIntentSucceeded(event, transaction),
      'payment_intent.payment_failed': () => this.handlePaymentIntentFailed(event, transaction),
      
      // √âv√©nements de facturation r√©currente (abonnements)
      'invoice.payment_succeeded': () => this.handleInvoicePaymentSucceeded(event, transaction),
      'invoice.payment_failed': () => this.handleInvoicePaymentFailed(event, transaction),
      
      // √âv√©nements d'abonnement Stripe
      'customer.subscription.created': () => this.handleSubscriptionCreated(event, transaction),
      'customer.subscription.updated': () => this.handleSubscriptionUpdated(event, transaction),
      'customer.subscription.deleted': () => this.handleSubscriptionDeleted(event, transaction),
    };
    
    // Chercher le bon gestionnaire pour ce type d'√©v√©nement
    const handler = eventHandlers[event.type];
    
    if (!handler) {
      // Si nous ne savons pas traiter ce type d'√©v√©nement, on l'ignore poliment
      console.log(`‚ö†Ô∏è Aucun gestionnaire pour l'√©v√©nement : ${event.type}, ignor√©...`);
      return { action: 'skipped', reason: 'unsupported_event_type' };
    }
    
    // Appeler le bon gestionnaire
    return await handler();
  }

  /**
   * ============================================================================
   * GESTIONNAIRES D'√âV√âNEMENTS SP√âCIALIS√âS
   * ============================================================================
   * 
   * Chaque m√©thode ci-dessous sait traiter un type sp√©cifique d'√©v√©nement Stripe.
   * C'est comme avoir des sp√©cialistes : un cardiologue pour le c≈ìur,
   * un dentiste pour les dents, etc.
   */

  /**
   * Traite un paiement ponctuel r√©ussi
   * 
   * Cet √©v√©nement arrive quand un utilisateur paye pour la premi√®re fois
   * et que le paiement r√©ussit. Nous devons alors activer son abonnement.
   * 
   * C'est comme quand quelqu'un paye son inscription au club de sport :
   * une fois le paiement confirm√©, on lui donne acc√®s aux installations.
   */
  async handlePaymentIntentSucceeded(event, transaction) {
    console.log('üí≥ Traitement d\'un paiement ponctuel r√©ussi...');
    
    const paymentIntent = event.data.object;
    const metadata = paymentIntent.metadata || {};
    
    // Stripe nous dit quel abonnement Portall correspond √† ce paiement
    // gr√¢ce aux m√©tadonn√©es que nous avons ajout√©es lors de la cr√©ation du paiement
    const subscriptionId = metadata.portall_subscription_id;
    
    if (!subscriptionId) {
      console.log('‚ö†Ô∏è Aucun ID d\'abonnement Portall dans les m√©tadonn√©es, ignor√©...');
      return { action: 'skipped', reason: 'no_portall_subscription_id' };
    }
    
    // ‚úÖ VOICI O√ô LES ASSOCIATIONS SONT CRUCIALES !
    // Nous r√©cup√©rons l'abonnement ET son plan en une seule requ√™te
    // Avant la correction, cette ligne √©chouait avec "not associated"
    const subscription = await UserSubscription.findByPk(subscriptionId, {
      include: [{
        model: SubscriptionPlan,
        as: 'plan'  // Cette relation fonctionne maintenant gr√¢ce aux associations !
      }],
      transaction
    });
    
    if (!subscription) {
      throw new Error(`Abonnement ${subscriptionId} introuvable`);
    }
    
    console.log(`üìã Abonnement trouv√© : ${subscription.plan?.name || 'Plan inconnu'}`);
    
    // Activer l'abonnement maintenant que le paiement est confirm√©
    await subscription.update({
      status: 'active',
      started_at: new Date()
    }, { transaction });
    
    // Enregistrer ce paiement dans notre historique pour les rapports
    await PaymentHistory.create({
      subscription_id: subscription.id,
      stripe_payment_intent_id: paymentIntent.id,
      amount_in_cents: paymentIntent.amount,
      currency: paymentIntent.currency,
      status: 'succeeded',
      payment_method: paymentIntent.payment_method_types?.[0] || 'unknown',
      processed_at: new Date()
    }, { transaction });
    
    console.log(`‚úÖ Abonnement ${subscription.id} activ√© avec succ√®s`);
    
    return {
      action: 'subscription_activated',
      subscription_id: subscription.id,
      plan_name: subscription.plan?.name || 'Plan inconnu',
      amount: paymentIntent.amount / 100 // Convertir les centimes en euros/dollars
    };
  }

  /**
   * Traite un paiement r√©current r√©ussi
   * 
   * Cet √©v√©nement arrive chaque mois/ann√©e quand Stripe pr√©l√®ve automatiquement
   * le paiement de l'abonnement. Nous devons prolonger la p√©riode d'acc√®s.
   * 
   * C'est comme le renouvellement automatique d'un abonnement magazine :
   * chaque mois, le paiement est pr√©lev√© et votre abonnement est prolong√©.
   */
  async handleInvoicePaymentSucceeded(event, transaction) {
    console.log('üîÑ Traitement d\'un paiement r√©current r√©ussi...');
    
    const invoice = event.data.object;
    const stripeSubscriptionId = invoice.subscription;
    
    if (!stripeSubscriptionId) {
      console.log('‚ö†Ô∏è Aucun ID d\'abonnement dans la facture, ignor√©...');
      return { action: 'skipped', reason: 'no_subscription_id' };
    }
    
    // Trouver l'abonnement Portall qui correspond √† cet abonnement Stripe
    const subscription = await UserSubscription.findOne({
      where: { stripe_subscription_id: stripeSubscriptionId },
      include: [{
        model: SubscriptionPlan,
        as: 'plan'
      }],
      transaction
    });
    
    if (!subscription) {
      console.log(`‚ö†Ô∏è Abonnement avec ID Stripe ${stripeSubscriptionId} introuvable`);
      return { action: 'skipped', reason: 'subscription_not_found' };
    }
    
    // Calculer la nouvelle date de fin selon le type d'abonnement
    const currentEndsAt = subscription.ends_at || new Date();
    const newEndsAt = new Date(currentEndsAt);
    
    // Ajouter la bonne p√©riode selon le plan
    if (subscription.plan?.billing_interval === 'month') {
      newEndsAt.setMonth(newEndsAt.getMonth() + 1);
    } else if (subscription.plan?.billing_interval === 'year') {
      newEndsAt.setFullYear(newEndsAt.getFullYear() + 1);
    } else if (subscription.plan?.billing_interval === 'week') {
      // Pour les plans de test
      newEndsAt.setDate(newEndsAt.getDate() + 7);
    }
    
    // Mettre √† jour l'abonnement avec la nouvelle date de fin
    await subscription.update({
      status: 'active',
      ends_at: newEndsAt
    }, { transaction });
    
    // Enregistrer ce paiement r√©current dans l'historique
    await PaymentHistory.create({
      subscription_id: subscription.id,
      stripe_invoice_id: invoice.id,
      amount_in_cents: invoice.amount_paid,
      currency: invoice.currency,
      status: 'succeeded',
      payment_method: 'recurring',
      processed_at: new Date()
    }, { transaction });
    
    console.log(`‚úÖ Abonnement ${subscription.id} renouvel√© jusqu'au ${newEndsAt.toISOString().split('T')[0]}`);
    
    return {
      action: 'subscription_renewed',
      subscription_id: subscription.id,
      new_ends_at: newEndsAt,
      amount: invoice.amount_paid / 100
    };
  }

  /**
   * Traite un √©chec de paiement ponctuel
   * 
   * Quand un paiement initial √©choue (carte refus√©e, fonds insuffisants, etc.),
   * nous devons marquer l'abonnement comme suspendu.
   */
  async handlePaymentIntentFailed(event, transaction) {
    console.log('‚ùå Traitement d\'un √©chec de paiement ponctuel...');
    
    const paymentIntent = event.data.object;
    const metadata = paymentIntent.metadata || {};
    const subscriptionId = metadata.portall_subscription_id;
    
    if (!subscriptionId) {
      return { action: 'skipped', reason: 'no_portall_subscription_id' };
    }
    
    const subscription = await UserSubscription.findByPk(subscriptionId, { transaction });
    
    if (!subscription) {
      return { action: 'skipped', reason: 'subscription_not_found' };
    }
    
    // Suspendre l'abonnement √† cause de l'√©chec de paiement
    await subscription.update({
      status: 'suspended'
    }, { transaction });
    
    // Enregistrer l'√©chec dans l'historique pour le support client
    await PaymentHistory.create({
      subscription_id: subscription.id,
      stripe_payment_intent_id: paymentIntent.id,
      amount_in_cents: paymentIntent.amount,
      currency: paymentIntent.currency,
      status: 'failed',
      payment_method: paymentIntent.payment_method_types?.[0] || 'unknown',
      failure_reason: paymentIntent.last_payment_error?.message || 'Paiement √©chou√©',
      processed_at: new Date()
    }, { transaction });
    
    console.log(`‚ö†Ô∏è Abonnement ${subscription.id} suspendu √† cause d'un √©chec de paiement`);
    
    return {
      action: 'subscription_suspended',
      subscription_id: subscription.id,
      reason: paymentIntent.last_payment_error?.message || 'Paiement √©chou√©'
    };
  }

  /**
   * Traite un √©chec de paiement r√©current
   * 
   * Quand un paiement mensuel/annuel automatique √©choue.
   */
  async handleInvoicePaymentFailed(event, transaction) {
    console.log('‚ùå Traitement d\'un √©chec de paiement r√©current...');
    
    const invoice = event.data.object;
    const stripeSubscriptionId = invoice.subscription;
    
    if (!stripeSubscriptionId) {
      return { action: 'skipped', reason: 'no_subscription_id' };
    }
    
    const subscription = await UserSubscription.findOne({
      where: { stripe_subscription_id: stripeSubscriptionId },
      transaction
    });
    
    if (!subscription) {
      return { action: 'skipped', reason: 'subscription_not_found' };
    }
    
    // Suspendre l'abonnement
    await subscription.update({
      status: 'suspended'
    }, { transaction });
    
    // Enregistrer l'√©chec
    await PaymentHistory.create({
      subscription_id: subscription.id,
      stripe_invoice_id: invoice.id,
      amount_in_cents: invoice.amount_due,
      currency: invoice.currency,
      status: 'failed',
      payment_method: 'recurring',
      failure_reason: '√âchec du paiement r√©current',
      processed_at: new Date()
    }, { transaction });
    
    return {
      action: 'subscription_suspended',
      subscription_id: subscription.id,
      reason: '√âchec du paiement r√©current'
    };
  }

  /**
   * ============================================================================
   * GESTIONNAIRES D'ABONNEMENT STRIPE
   * ============================================================================
   * 
   * Ces m√©thodes traitent les √©v√©nements li√©s aux abonnements c√¥t√© Stripe.
   * En g√©n√©ral, nous g√©rons les abonnements c√¥t√© Portall, donc ces √©v√©nements
   * servent surtout √† maintenir la synchronisation.
   */

  /**
   * Un nouvel abonnement a √©t√© cr√©√© c√¥t√© Stripe
   */
  async handleSubscriptionCreated(event, transaction) {
    console.log('‚ûï Traitement de la cr√©ation d\'abonnement Stripe...');
    
    const stripeSubscription = event.data.object;
    
    // Pour l'instant, on se contente de logger car nous g√©rons les abonnements c√¥t√© Portall
    console.log(`üìù Nouvel abonnement Stripe cr√©√© : ${stripeSubscription.id}`);
    
    return {
      action: 'subscription_created_logged',
      stripe_subscription_id: stripeSubscription.id
    };
  }

  /**
   * Un abonnement Stripe a √©t√© modifi√©
   */
  async handleSubscriptionUpdated(event, transaction) {
    console.log('üîÑ Traitement de la mise √† jour d\'abonnement Stripe...');
    
    const stripeSubscription = event.data.object;
    
    // Chercher l'abonnement Portall correspondant
    const subscription = await UserSubscription.findOne({
      where: { stripe_subscription_id: stripeSubscription.id },
      transaction
    });
    
    if (!subscription) {
      return { action: 'skipped', reason: 'subscription_not_found' };
    }
    
    // Synchroniser le statut avec Stripe
    let newStatus = subscription.status;
    
    if (stripeSubscription.status === 'active') {
      newStatus = 'active';
    } else if (stripeSubscription.status === 'canceled') {
      newStatus = 'cancelled';
    } else if (stripeSubscription.status === 'past_due') {
      newStatus = 'suspended';
    }
    
    if (newStatus !== subscription.status) {
      await subscription.update({ status: newStatus }, { transaction });
      console.log(`‚úÖ Statut de l'abonnement ${subscription.id} mis √† jour : ${newStatus}`);
    }
    
    return {
      action: 'subscription_status_updated',
      subscription_id: subscription.id,
      old_status: subscription.status,
      new_status: newStatus
    };
  }

  /**
   * Un abonnement Stripe a √©t√© supprim√©
   */
  async handleSubscriptionDeleted(event, transaction) {
    console.log('üóëÔ∏è Traitement de la suppression d\'abonnement Stripe...');
    
    const stripeSubscription = event.data.object;
    
    const subscription = await UserSubscription.findOne({
      where: { stripe_subscription_id: stripeSubscription.id },
      transaction
    });
    
    if (!subscription) {
      return { action: 'skipped', reason: 'subscription_not_found' };
    }
    
    // Marquer comme annul√© (on garde les donn√©es pour l'historique)
    await subscription.update({
      status: 'cancelled',
      cancelled_at: new Date()
    }, { transaction });
    
    console.log(`‚úÖ Abonnement ${subscription.id} marqu√© comme annul√©`);
    
    return {
      action: 'subscription_cancelled',
      subscription_id: subscription.id
    };
  }
}

// ============================================================================
// EXPORT DU SERVICE
// ============================================================================

// Nous cr√©ons une seule instance du service que toute l'application va utiliser
// C'est ce qu'on appelle le pattern Singleton : une seule instance partag√©e
const webhookService = new WebhookService();

// Nous exportons cette instance unique
module.exports = webhookService;