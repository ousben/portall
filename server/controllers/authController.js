// portall/server/controllers/authController.js

const { User, PlayerProfile, CoachProfile, NJCAACoachProfile, NJCAACollege, NCAACollege } = require('../models');
const AuthService = require('../services/authService');
const emailService = require('../services/emailService');
const { Op } = require('sequelize');
const { sequelize } = require('../config/database.connection');

// ‚úÖ CORRECTION CRITIQUE : Import de bcrypt manquant
const bcrypt = require('bcryptjs');

/**
 * üîê Contr√¥leur d'authentification COMPLET mis √† jour pour tous les types d'utilisateurs
 * 
 * Ce contr√¥leur g√®re l'authentification pour TROIS types d'utilisateurs :
 * 1. üë§ Joueurs NJCAA (players) - Profil PlayerProfile
 * 2. üèüÔ∏è Coachs NCAA/NAIA (coaches) - Profil CoachProfile  
 * 3. üèüÔ∏è Coachs NJCAA (njcaa_coaches) - Profil NJCAACoachProfile [NOUVEAU]
 * 
 * üéØ Fonctionnalit√©s principales :
 * - Inscription avec validation conditionnelle selon le type
 * - Connexion universelle pour tous les types
 * - Gestion des tokens JWT avec refresh
 * - Reset de mot de passe avec emails automatiques
 * - R√©cup√©ration de profils complets avec relations
 * 
 * üèóÔ∏è Architecture p√©dagogique : Ce contr√¥leur montre comment √©tendre une
 * architecture existante pour supporter de nouveaux types d'utilisateurs
 * sans casser le code existant (principe Open/Closed de SOLID).
 */
class AuthController {
  /**
   * üìù Inscription universelle avec routage intelligent selon le type d'utilisateur
   * 
   * Cette m√©thode centralis√©e g√®re l'inscription pour tous les types d'utilisateurs.
   * Elle suit un pattern de Factory Method pour cr√©er le bon type de profil
   * selon le userType fourni.
   * 
   * üîÑ Workflow d'inscription :
   * 1. Validation des donn√©es (d√©j√† fait par middleware)
   * 2. V√©rification que l'email n'existe pas
   * 3. Validation sp√©cialis√©e selon le type (business logic)
   * 4. Cr√©ation de l'utilisateur de base
   * 5. Cr√©ation du profil sp√©cialis√© (Player/Coach/NJCAACoach)
   * 6. Envoi des emails de notification
   * 
   * üí° Concept cl√© : Transaction atomique - soit tout r√©ussit, soit tout √©choue
   */
  static async register(req, res) {
    const transaction = await sequelize.transaction();
    
    try {
      console.log(`üìù Registration attempt for user type: ${req.body.userType}`);
      
      const { 
        email, 
        password, 
        confirmPassword,
        firstName, 
        lastName, 
        userType,
        // Champs sp√©cifiques selon le type d'utilisateur
        ...additionalData
      } = req.body;

      // ‚úÖ Validation de base commune √† tous les types
      if (!email || !password || !firstName || !lastName || !userType) {
        await transaction.rollback();
        return res.status(400).json({
          status: 'error',
          message: 'Missing required fields',
          code: 'MISSING_REQUIRED_FIELDS'
        });
      }

      if (password !== confirmPassword) {
        await transaction.rollback();
        return res.status(400).json({
          status: 'error',
          message: 'Passwords do not match',
          code: 'PASSWORD_MISMATCH'
        });
      }

      // V√©rifier que l'email n'existe pas d√©j√†
      const existingUser = await User.findOne({ where: { email: email.toLowerCase() } });
      if (existingUser) {
        await transaction.rollback();
        return res.status(409).json({
          status: 'error',
          message: 'Email already registered',
          code: 'EMAIL_EXISTS'
        });
      }

      // ‚úÖ √âTAPE 1 : Cr√©er l'utilisateur de base
      const hashedPassword = await bcrypt.hash(password, 12);
      
      const user = await User.create({
        email: email.toLowerCase().trim(),
        password: hashedPassword,
        firstName: firstName.trim(),
        lastName: lastName.trim(),
        userType: userType,
        isActive: false, // D√©sactiv√© jusqu'√† validation admin
        isEmailVerified: false
      }, { transaction });

      console.log(`‚úÖ Base user created (ID: ${user.id})`);

      // ‚úÖ √âTAPE 2 : Cr√©er le profil sp√©cialis√© selon le type
      let profile = null;
      
      switch (userType) {
        case 'player':
          profile = await AuthController.createPlayerProfile(user.id, additionalData, transaction);
          break;
          
        case 'coach':
          profile = await AuthController.createCoachProfile(user.id, additionalData, transaction);
          break;
          
        case 'njcaa_coach':
          profile = await AuthController.createNJCAACoachProfile(user.id, additionalData, transaction);
          break;
          
        default:
          await transaction.rollback();
          return res.status(400).json({
            status: 'error',
            message: 'Invalid user type',
            code: 'INVALID_USER_TYPE'
          });
      }

      // ‚úÖ √âTAPE 3 : Finaliser l'inscription
      await transaction.commit();
      
      console.log(`üéâ Registration completed successfully for ${userType}: ${email}`);

      // G√©n√©rer les tokens pour la connexion automatique (optionnel)
      const tokens = AuthService.generateTokenPair(user);

      return res.status(201).json({
        status: 'success',
        message: 'Registration successful',
        data: {
          user: user.toPublicJSON(),
          profile: profile ? profile.toJSON() : null,
          tokens: tokens
        }
      });

    } catch (error) {
      await transaction.rollback();
      console.error('Registration error:', error);
      
      return res.status(500).json({
        status: 'error',
        message: 'Registration failed',
        code: 'REGISTRATION_ERROR',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  /**
   * üë§ Cr√©ation du profil joueur avec conversion d'unit√©s (VERSION CORRIG√âE)
   * 
   * Cette version ajoute la conversion automatique des unit√©s imp√©riales (interface)
   * vers les unit√©s m√©triques (base de donn√©es) pour assurer la coh√©rence des validations.
   * 
   * üéØ Conversions appliqu√©es :
   * - Height : Pouces ‚Üí Centim√®tres (√ó 2.54)
   * - Weight : Livres ‚Üí Kilogrammes (√∑ 2.205)
   */
  static async createPlayerProfile(userId, profileData, transaction) {
    try {
      console.log(`üë§ Creating player profile for user ${userId}`);
    
      const { 
        dateOfBirth, 
        height, 
        weight, 
        position, 
        gender, 
        collegeId, 
        currentYear, 
        graduationYear 
      } = profileData;

      // Validation des champs requis
      if (!dateOfBirth || !height || !weight || !position || !gender || !collegeId || !currentYear || !graduationYear) {
        throw new Error('Missing required player fields');
      }

      // üîß CONVERSION D'UNIT√âS IMP√âRIALES ‚Üí M√âTRIQUES
      // Cette conversion assure la coh√©rence avec les validations Sequelize
      const heightInCm = Math.round(height * 2.54);        // Pouces ‚Üí Centim√®tres  
      const weightInKg = Math.round(weight / 2.205);       // Livres ‚Üí Kilogrammes
    
      console.log(`üìè Unit conversion - Height: ${height}" ‚Üí ${heightInCm}cm, Weight: ${weight}lbs ‚Üí ${weightInKg}kg`);

      // V√©rifier que le college NJCAA existe
      const college = await NJCAACollege.findByPk(collegeId);
      if (!college || !college.isActive) {
        throw new Error('Invalid or inactive NJCAA college');
      }

      // Cr√©er le profil avec les valeurs converties
      const playerProfile = await PlayerProfile.create({
        userId: userId,
        dateOfBirth: new Date(dateOfBirth),
        height: heightInCm,              // ‚úÖ Valeur convertie en cm
        weight: weightInKg,              // ‚úÖ Valeur convertie en kg
        position: position,
        gender: gender,
        collegeId: collegeId,
        currentYear: currentYear,
        graduationYear: parseInt(graduationYear),
        isProfileVisible: false, // Invisible jusqu'√† validation admin
        profileViews: 0
      }, { transaction });

      console.log(`‚úÖ Player profile created successfully (ID: ${playerProfile.id})`);
    
      return playerProfile;
    
    } catch (error) {
      console.error('Error creating player profile:', error);
      throw new Error(`Player profile creation failed: ${error.message}`);
    }
  }

  /**
   * üèà Cr√©ation du profil coach NCAA/NAIA (m√©thode existante)
   */
  static async createCoachProfile(userId, profileData, transaction) {
    try {
      console.log(`üèà Creating coach profile for user ${userId}`);
      
      const { 
        position, 
        phoneNumber, 
        collegeId, 
        schoolType, 
        yearsOfExperience,
        coachingLicenses 
      } = profileData;

      // Validation des champs requis
      if (!position || !phoneNumber || !collegeId || !schoolType) {
        throw new Error('Missing required coach fields');
      }

      // V√©rifier que le college NCAA existe
      const college = await NCAACollege.findByPk(collegeId);
      if (!college || !college.isActive) {
        throw new Error('Invalid or inactive NCAA college');
      }

      const coachProfile = await CoachProfile.create({
        userId: userId,
        position: position,
        phoneNumber: phoneNumber,
        collegeId: collegeId,
        schoolType: schoolType,
        yearsOfExperience: yearsOfExperience || 0,
        coachingLicenses: coachingLicenses || [],
        isActive: false, // N√©cessite validation et abonnement
        subscriptionStatus: 'none',
        totalSearches: 0
      }, { transaction });

      console.log(`‚úÖ Coach profile created successfully (ID: ${coachProfile.id})`);
      
      return coachProfile;
      
    } catch (error) {
      console.error('Error creating coach profile:', error);
      throw new Error(`Coach profile creation failed: ${error.message}`);
    }
  }

  /**
   * üèüÔ∏è Cr√©ation du profil coach NJCAA (NOUVELLE M√âTHODE)
   * 
   * CONCEPT M√âTIER : Les coachs NJCAA ont un workflow diff√©rent des autres :
   * - Pas d'abonnement Stripe requis
   * - Validation automatique par leur institution
   * - Acc√®s imm√©diat aux fonctionnalit√©s d'√©valuation
   */
  static async createNJCAACoachProfile(userId, profileData, transaction) {
    try {
      console.log(`üèüÔ∏è Creating NJCAA coach profile for user ${userId}`);
      
      const { position, phoneNumber, collegeId, division, teamSport } = profileData;
      
      // Validation des champs requis pour NJCAA coach
      if (!position || !phoneNumber || !collegeId || !division || !teamSport) {
        throw new Error('Missing required NJCAA coach fields: position, phoneNumber, collegeId, division, teamSport');
      }

      // V√©rifier que le college NJCAA existe
      const college = await NJCAACollege.findByPk(collegeId);
      if (!college || !college.isActive) {
        throw new Error('Invalid or inactive NJCAA college');
      }

      // Cr√©er le profil coach NJCAA
      const njcaaCoachProfile = await NJCAACoachProfile.create({
        userId: userId,
        position: position,
        phoneNumber: phoneNumber,
        collegeId: collegeId,
        division: division,
        teamSport: teamSport,
        totalEvaluations: 0,
        lastEvaluationDate: null
      }, { transaction });

      console.log(`‚úÖ NJCAA coach profile created successfully (ID: ${njcaaCoachProfile.id})`);
      
      return njcaaCoachProfile;
      
    } catch (error) {
      console.error('Error creating NJCAA coach profile:', error);
      throw new Error(`NJCAA coach profile creation failed: ${error.message}`);
    }
  }

  /**
   * üîê Connexion universelle - M√âTHODE PRINCIPALE CORRIG√âE
   * 
   * Cette m√©thode g√®re la connexion pour tous les types d'utilisateurs avec
   * une approche d√©fensive contre les erreurs et une gestion robuste des profils.
   */
  static async login(req, res) {
    try {
      console.log('üîç Login attempt started');
      const { email, password } = req.body;

      // Validation des entr√©es de base
      if (!email || !password) {
        return res.status(400).json({
          status: 'error',
          message: 'Email and password are required',
          code: 'MISSING_CREDENTIALS'
        });
      }

      console.log(`üîç Looking for user with email: ${email}`);

      // ‚úÖ CORRECTION : Recherche simplifi√©e sans inclusion des profils
      // pour √©viter les erreurs d'association lors de la connexion
      const user = await User.findOne({
        where: { email: email.toLowerCase().trim() }
      });

      if (!user) {
        console.log('‚ùå User not found');
        return res.status(401).json({
          status: 'error',
          message: 'Invalid credentials',
          code: 'INVALID_CREDENTIALS'
        });
      }

      console.log(`‚úÖ User found: ${user.id} (${user.userType})`);

      // V√©rifier le mot de passe avec la m√©thode int√©gr√©e
      const isPasswordValid = await user.validatePassword(password);
      if (!isPasswordValid) {
        console.log('‚ùå Invalid password');
        return res.status(401).json({
          status: 'error',
          message: 'Invalid credentials',
          code: 'INVALID_CREDENTIALS'
        });
      }

      console.log('‚úÖ Password validated');

      // V√©rifier que le compte est actif
      if (!user.isActive) {
        console.log('‚ùå Account inactive');
        return res.status(403).json({
          status: 'error',
          message: 'Account is not activated. Please contact support.',
          code: 'ACCOUNT_INACTIVE'
        });
      }

      console.log('‚úÖ Account is active');

      // ‚úÖ CORRECTION : R√©cup√©ration d√©fensive du profil
      let profile = null;
      try {
        profile = await user.getProfile();
        console.log(`‚úÖ Profile retrieved: ${profile ? 'Found' : 'Not found'}`);
      } catch (profileError) {
        console.error('‚ö†Ô∏è Profile retrieval error (non-critical):', profileError.message);
        // Ne pas faire √©chouer la connexion si le profil n'est pas trouv√©
      }

      // Mettre √† jour la derni√®re connexion
      try {
        await user.updateLastLogin();
        console.log('‚úÖ Last login updated');
      } catch (updateError) {
        console.error('‚ö†Ô∏è Last login update error (non-critical):', updateError.message);
      }

      // ‚úÖ CORRECTION : G√©n√©ration s√©curis√©e des tokens
      let tokens;
      try {
        tokens = AuthService.generateTokenPair(user);
        console.log('‚úÖ Tokens generated successfully');
      } catch (tokenError) {
        console.error('‚ùå Token generation error:', tokenError);
        return res.status(500).json({
          status: 'error',
          message: 'Authentication system error',
          code: 'TOKEN_GENERATION_ERROR'
        });
      }

      console.log(`üéâ Successful login for ${user.userType}: ${email}`);

      // R√©ponse de succ√®s avec structure simplifi√©e et robuste
      return res.status(200).json({
        status: 'success',
        message: 'Login successful',
        data: {
          user: user.toPublicJSON(),
          profile: profile ? profile.toJSON() : null,
          tokens: tokens
        }
      });

    } catch (error) {
      console.error('‚ùå Login error:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Login failed due to server error',
        code: 'LOGIN_ERROR',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  /**
   * üîÑ Rafra√Æchissement des tokens (m√©thode existante inchang√©e)
   * 
   * Cette m√©thode permet de renouveler les tokens d'acc√®s sans
   * redemander √† l'utilisateur de se reconnecter. Elle v√©rifie
   * la validit√© du refresh token et g√©n√®re une nouvelle paire.
   */
  static async refresh(req, res) {
    try {
      const { refreshToken } = req.body;

      console.log('üîÑ Token refresh attempt');

      // V√©rifier et d√©coder le refresh token
      let decoded;
      try {
        decoded = AuthService.verifyToken(refreshToken);
      } catch (error) {
        return res.status(401).json({
          status: 'error',
          message: 'Invalid refresh token',
          code: 'INVALID_REFRESH_TOKEN'
        });
      }

      // S'assurer que c'est bien un refresh token
      if (decoded.tokenType !== 'refresh') {
        return res.status(401).json({
          status: 'error',
          message: 'Invalid token type',
          code: 'INVALID_TOKEN_TYPE'
        });
      }

      // V√©rifier que l'utilisateur existe toujours et est actif
      const user = await User.findByPk(decoded.userId);
      if (!user || !user.isActive) {
        return res.status(401).json({
          status: 'error',
          message: 'User not found or inactive',
          code: 'USER_NOT_FOUND'
        });
      }

      // G√©n√©rer une nouvelle paire de tokens
      const newTokenPair = AuthService.generateTokenPair(user);

      console.log(`‚úÖ Token refreshed for user: ${user.email}`);

      return res.status(200).json({
        status: 'success',
        message: 'Tokens refreshed successfully',
        data: {
          tokens: newTokenPair
        }
      });

    } catch (error) {
      console.error('Token refresh error:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Token refresh failed',
        ...(process.env.NODE_ENV === 'development' && { debug: error.message })
      });
    }
  }

  /**
   * üîÑ Rafra√Æchissement du token d'acc√®s
   */
  static async refreshToken(req, res) {
    try {
      const { refreshToken } = req.body;

      if (!refreshToken) {
        return res.status(400).json({
          status: 'error',
          message: 'Refresh token is required',
          code: 'MISSING_REFRESH_TOKEN'
        });
      }

      // V√©rifier et d√©coder le refresh token
      let decoded;
      try {
        decoded = AuthService.verifyRefreshToken(refreshToken);
      } catch (tokenError) {
        return res.status(401).json({
          status: 'error',
          message: 'Invalid refresh token',
          code: 'INVALID_REFRESH_TOKEN'
        });
      }

      // R√©cup√©rer l'utilisateur
      const user = await User.findByPk(decoded.userId);
      if (!user || !user.isActive) {
        return res.status(401).json({
          status: 'error',
          message: 'User not found or inactive',
          code: 'USER_NOT_FOUND'
        });
      }

      // G√©n√©rer de nouveaux tokens
      const tokens = AuthService.generateTokenPair(user);

      console.log(`üîÑ Token refreshed for user: ${user.email}`);

      return res.json({
        status: 'success',
        message: 'Token refreshed successfully',
        data: {
          tokens: tokens
        }
      });

    } catch (error) {
      console.error('Token refresh error:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Token refresh failed',
        code: 'TOKEN_REFRESH_ERROR'
      });
    }
  }

  /**
   * üö™ D√©connexion (invalidation du token)
   */
  static async logout(req, res) {
    try {
      // Dans une impl√©mentation compl√®te, vous pourriez ajouter le token √† une blacklist
      // Pour ce prototype, nous nous contentons d'une r√©ponse de succ√®s
      
      console.log(`üö™ User logged out: ${req.user.email}`);
      
      return res.json({
        status: 'success',
        message: 'Logout successful'
      });

    } catch (error) {
      console.error('Logout error:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Logout failed',
        code: 'LOGOUT_ERROR'
      });
    }
  }

  /**
   * üë§ Obtenir le profil de l'utilisateur connect√© (m√©thode am√©lior√©e)
   * 
   * Cette m√©thode r√©cup√®re maintenant le profil complet avec
   * toutes les relations pour fournir toutes les donn√©es
   * n√©cessaires au frontend selon le type d'utilisateur.
   * 
   * üîÑ Am√©lioration : Support automatique des 3 types d'utilisateurs
   */
  static async getMe(req, res) {
    try {
      const user = req.user;

      // R√©cup√©rer l'utilisateur frais depuis la base avec ses relations
      const freshUser = await User.findByPk(user.id);
      
      if (!freshUser) {
        return res.status(404).json({
          status: 'error',
          message: 'User not found',
          code: 'USER_NOT_FOUND'
        });
      }

      // R√©cup√©rer le profil complet avec les relations
      const userWithProfile = await freshUser.toCompleteJSON();

      return res.status(200).json({
        status: 'success',
        data: {
          user: userWithProfile
        }
      });

    } catch (error) {
      console.error('Get user profile error:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Failed to get user profile',
        ...(process.env.NODE_ENV === 'development' && { debug: error.message })
      });
    }
  }

  /**
   * üîë Demande de reset de mot de passe avec email automatique
   * 
   * Cette m√©thode g√©n√®re un token de reset s√©curis√© et envoie
   * automatiquement l'email avec le lien de r√©initialisation.
   * Elle fonctionne pour tous les types d'utilisateurs.
   */
  static async forgotPassword(req, res) {
    try {
      const { email } = req.body;

      console.log(`üîë Password reset request for: ${email}`);

      const user = await User.findByEmail(email);
      
      // R√©ponse standardis√©e pour la s√©curit√© (ne r√©v√®le pas si l'email existe)
      const standardResponse = {
        status: 'success',
        message: 'If an account with this email exists, password reset instructions have been sent.'
      };

      if (!user) {
        // M√™me r√©ponse pour √©viter l'√©num√©ration d'emails
        return res.status(200).json(standardResponse);
      }

      // G√©n√©rer un token de reset s√©curis√© avec expiration
      const resetToken = AuthService.generateSecureToken();
      const resetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1 heure

      // Sauvegarder le token en base
      await user.update({
        passwordResetToken: resetToken,
        passwordResetExpires: resetExpires
      });

      // Envoyer l'email de reset de mani√®re asynchrone
      setTimeout(async () => {
        try {
          await emailService.sendPasswordResetEmail(user, resetToken);
          console.log(`üìß Password reset email sent to: ${user.email}`);
        } catch (emailError) {
          console.error('‚ùå Failed to send password reset email:', emailError);
        }
      }, 100);

      return res.status(200).json(standardResponse);

    } catch (error) {
      console.error('Forgot password error:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Password reset request failed. Please try again later.',
        ...(process.env.NODE_ENV === 'development' && { debug: error.message })
      });
    }
  }

  /**
   * üîë R√©initialisation du mot de passe avec token (m√©thode existante inchang√©e)
   * 
   * Cette m√©thode v√©rifie le token de reset et met √† jour le mot de passe.
   * Elle fonctionne pour tous les types d'utilisateurs.
   */
  static async resetPassword(req, res) {
    try {
      const { token, password } = req.body;

      console.log('üîë Password reset attempt with token');

      // Rechercher l'utilisateur avec un token valide et non expir√©
      const user = await User.findOne({
        where: {
          passwordResetToken: token,
          passwordResetExpires: {
            [Op.gt]: new Date() // Token non expir√©
          }
        }
      });

      if (!user) {
        return res.status(400).json({
          status: 'error',
          message: 'Invalid or expired reset token',
          code: 'INVALID_RESET_TOKEN'
        });
      }

      // Mettre √† jour le mot de passe et nettoyer les tokens de reset
      await user.update({
        password: password, // Sera hash√© automatiquement par le hook
        passwordResetToken: null,
        passwordResetExpires: null
      });

      console.log(`‚úÖ Password reset successful for user: ${user.email}`);

      return res.status(200).json({
        status: 'success',
        message: 'Password reset successful. You can now login with your new password.'
      });

    } catch (error) {
      console.error('Reset password error:', error);
      return res.status(500).json({
        status: 'error',
        message: 'Password reset failed',
        ...(process.env.NODE_ENV === 'development' && { debug: error.message })
      });
    }
  }

  // ========================
  // üõ†Ô∏è M√âTHODES UTILITAIRES ET VALIDATIONS
  // ========================

  /**
   * üÜï Message de succ√®s d'inscription adapt√© au type d'utilisateur
   * 
   * Cette m√©thode retourne un message personnalis√© selon le type
   * d'utilisateur pour am√©liorer l'exp√©rience utilisateur.
   */
  static getRegistrationSuccessMessage(userType) {
    const messages = {
      player: 'Player account created successfully! Your account is pending admin approval.',
      coach: 'Coach account created successfully! Your account is pending admin approval.',
      njcaa_coach: 'NJCAA Coach account created successfully! Your account is pending admin approval and you will receive access to your player evaluation dashboard once approved.'
    };
    
    return messages[userType] || 'Account created successfully! Your account is pending admin approval.';
  }

  /**
   * üìß Notification automatique des admins pour nouvelles inscriptions
   * 
   * Cette m√©thode r√©cup√®re tous les administrateurs actifs et leur envoie
   * une notification de nouvelle inscription n√©cessitant leur attention.
   * 
   * üéØ Pattern utilis√© : Service discovery pattern - on trouve dynamiquement
   * tous les admins plut√¥t que d'avoir une liste cod√©e en dur.
   */
  static async notifyAdminsOfNewRegistration(newUser) {
    try {
      // R√©cup√©rer tous les emails des admins actifs
      const adminUsers = await User.findAll({
        where: {
          userType: 'admin',
          isActive: true
        },
        attributes: ['email', 'firstName', 'lastName']
      });

      if (adminUsers.length === 0) {
        console.warn('‚ö†Ô∏è No active admin users found for notification');
        return;
      }

      const adminEmails = adminUsers.map(admin => admin.email);
      
      console.log(`üìß Notifying ${adminEmails.length} admins of new ${newUser.userType} registration`);
      
      // Envoyer la notification √† tous les admins simultan√©ment
      const results = await emailService.sendNewRegistrationNotificationToAdmin(newUser, adminEmails);
      
      // V√©rifier les r√©sultats d'envoi
      const successfulSends = results.filter(result => result.success).length;
      const failedSends = results.length - successfulSends;
      
      if (failedSends > 0) {
        console.warn(`‚ö†Ô∏è ${failedSends} admin notifications failed to send`);
      }
      
      console.log(`üìß Successfully notified ${successfulSends}/${adminEmails.length} admins`);
      return results;

    } catch (error) {
      console.error('‚ùå Error notifying admins of new registration:', error);
      // On ne lance pas l'erreur car ce n'est pas critique pour l'inscription
      // L'admin peut toujours voir les nouveaux comptes dans son dashboard
    }
  }

  /**
   * üîç Validation des donn√©es de profil selon le type d'utilisateur
   * 
   * Cette m√©thode encapsule toute la logique de validation m√©tier
   * sp√©cifique √† chaque type d'utilisateur. Elle v√©rifie non seulement
   * le format des donn√©es, mais aussi leur coh√©rence business.
   * 
   * üéØ Exemples de validations m√©tier :
   * - V√©rifier que le college existe et est actif
   * - Valider la coh√©rence division/college
   * - V√©rifier les contraintes d'√¢ge pour les joueurs
   * - Valider les num√©ros de t√©l√©phone professionnels pour les coachs
   */
  static async validateProfileData(userType, profileData) {
    const errors = [];
    
    try {
      // Import des mod√®les au moment de l'ex√©cution pour √©viter les d√©pendances circulaires
      const models = require('../models');

      if (userType === 'player') {
        // Validation sp√©cifique aux joueurs
        const { 
          dateOfBirth, height, weight, position, gender, 
          collegeId, currentYear, graduationYear, gpa 
        } = profileData;

        // Validation √¢ge (16-25 ans typiquement pour NJCAA)
        if (dateOfBirth) {
          const age = new Date().getFullYear() - new Date(dateOfBirth).getFullYear();
          if (age < 16 || age > 30) {
            errors.push({
              field: 'dateOfBirth',
              message: 'Age must be between 16 and 30 years for NJCAA players'
            });
          }
        }

        // Validation dimensions physiques r√©alistes
        if (height && (height < 150 || height > 220)) {
          errors.push({
            field: 'height',
            message: 'Height must be between 150 and 220 cm'
          });
        }

        if (weight && (weight < 50 || weight > 150)) {
          errors.push({
            field: 'weight',
            message: 'Weight must be between 50 and 150 kg'
          });
        }

        // Validation college NJCAA
        if (collegeId) {
          try {
            const college = await models.NJCAACollege.findByPk(collegeId);
            if (!college || !college.isActive) {
              errors.push({
                field: 'collegeId',
                message: 'Invalid or inactive NJCAA college'
              });
            }
          } catch (dbError) {
            errors.push({
              field: 'collegeId',
              message: 'Error validating college'
            });
          }
        }

        // Validation GPA
        if (gpa && (gpa < 0 || gpa > 4.0)) {
          errors.push({
            field: 'gpa',
            message: 'GPA must be between 0.0 and 4.0'
          });
        }

      } else if (userType === 'coach') {
        // Validation sp√©cifique aux coachs NCAA/NAIA
        const { position, phoneNumber, collegeId, division, teamSport } = profileData;

        if (!position || !['head_coach', 'assistant_coach'].includes(position)) {
          errors.push({
            field: 'position',
            message: 'Position is required and must be head_coach or assistant_coach'
          });
        }

        if (!phoneNumber || !/^\+?[\d\s\-\(\)]+$/.test(phoneNumber)) {
          errors.push({
            field: 'phoneNumber',
            message: 'Valid phone number is required for recruiting contact'
          });
        }

        if (!division || !['ncaa_d1', 'ncaa_d2', 'ncaa_d3', 'naia'].includes(division)) {
          errors.push({
            field: 'division',
            message: 'Valid division is required (NCAA D1/D2/D3 or NAIA)'
          });
        }

        if (!teamSport || !['mens_soccer', 'womens_soccer'].includes(teamSport)) {
          errors.push({
            field: 'teamSport',
            message: 'Team sport selection is required (mens_soccer or womens_soccer)'
          });
        }

        // Validation college NCAA (simplifi√©e pour l'instant)
        if (collegeId) {
          try {
            let actualCollegeId = collegeId;
            if (typeof collegeId === 'object' && collegeId.collegeId) {
              actualCollegeId = collegeId.collegeId;
            }
            
            const college = await models.NCAACollege.findByPk(actualCollegeId);
            if (!college || !college.isActive) {
              errors.push({
                field: 'collegeId',
                message: 'Invalid or inactive NCAA college'
              });
            }
          } catch (dbError) {
            errors.push({
              field: 'collegeId',
              message: 'Error validating NCAA college'
            });
          }
        }

      } else if (userType === 'njcaa_coach') {
        // üÜï NOUVELLE VALIDATION : Pour les coachs NJCAA
        const { position, phoneNumber, collegeId, division, teamSport } = profileData;

        // Validation position (identique aux autres coachs)
        if (!position || !['head_coach', 'assistant_coach'].includes(position)) {
          errors.push({
            field: 'position',
            message: 'Position must be head_coach or assistant_coach'
          });
        }

        // Validation t√©l√©phone (identique aux autres coachs)
        if (!phoneNumber || phoneNumber.length < 10) {
          errors.push({
            field: 'phoneNumber',
            message: 'Valid phone number is required'
          });
        }

        // üéØ Validation division NJCAA sp√©cifique
        if (!division || !['njcaa_d1', 'njcaa_d2', 'njcaa_d3'].includes(division)) {
          errors.push({
            field: 'division',
            message: 'Valid NJCAA division is required (D1, D2, or D3)'
          });
        }

        // Validation sport (identique aux autres coachs)
        if (!teamSport || !['mens_soccer', 'womens_soccer'].includes(teamSport)) {
          errors.push({
            field: 'teamSport',
            message: 'Team sport selection is required (mens_soccer or womens_soccer)'
          });
        }

        // üè´ Validation college NJCAA sp√©cifique
        if (collegeId) {
          try {
            let actualCollegeId = collegeId;
            if (typeof collegeId === 'object' && collegeId.collegeId) {
              actualCollegeId = collegeId.collegeId;
            }
            
            const college = await models.NJCAACollege.findByPk(actualCollegeId);
            if (!college || !college.isActive) {
              errors.push({
                field: 'collegeId',
                message: 'Invalid or inactive NJCAA college'
              });
            }

            // üîç Validation crois√©e : la division du coach doit correspondre au college
            // Cette validation peut √™tre ajout√©e plus tard si n√©cessaire
            // if (college.division !== division) {
            //   errors.push({
            //     field: 'division',
            //     message: `Division mismatch: ${college.name} is ${college.division} but you selected ${division}`
            //   });
            // }

          } catch (dbError) {
            errors.push({
              field: 'collegeId',
              message: 'Error validating NJCAA college'
            });
          }
        }
      }

      return {
        isValid: errors.length === 0,
        errors: errors
      };

    } catch (error) {
      console.error('Profile validation error:', error);
      return {
        isValid: false,
        errors: [{
          field: 'general',
          message: 'Profile validation failed due to server error'
        }]
      };
    }
  }
}

module.exports = AuthController;