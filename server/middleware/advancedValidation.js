// portall/server/middleware/advancedValidation.js

const Joi = require('joi');
const { playerRegistrationSchema } = require('../validators/playerValidators');
const { coachRegistrationSchema } = require('../validators/coachValidators');
const { njcaaCoachRegistrationSchema } = require('../validators/njcaaCoachValidators'); // NOUVEAU
const { playerEvaluationSchema } = require('./playerEvaluationValidation'); // NOUVEAU

/**
 * Middleware de validation avanc√© √©tendu pour supporter tous les types d'utilisateurs
 * 
 * MISE √Ä JOUR MAJEURE : Ajout du support complet pour les coachs NJCAA
 * avec leur propre sch√©ma de validation et r√®gles m√©tier.
 * 
 * Ce middleware impl√©mente une validation conditionnelle intelligente :
 * - D√©tecte automatiquement le type d'utilisateur
 * - Applique le sch√©ma de validation appropri√©
 * - Effectue des validations crois√©es sp√©cifiques √† chaque type
 * - Enrichit les donn√©es avec des informations de r√©f√©rence
 */

/**
 * Middleware principal de validation d'inscription (√âTENDU)
 * 
 * Cette fonction orchestre la validation compl√®te selon le type d'utilisateur,
 * incluant maintenant le support des coachs NJCAA.
 */
const validateRegistration = async (req, res, next) => {
  try {
    const { userType } = req.body;

    console.log(`üîç Advanced validation starting for user type: ${userType}`);

    // V√©rifier que le type d'utilisateur est support√©
    const supportedTypes = ['player', 'coach', 'njcaa_coach']; // √âTENDU
    if (!userType || !supportedTypes.includes(userType)) {
      return res.status(400).json({
        status: 'error',
        message: 'Invalid or missing user type',
        code: 'INVALID_USER_TYPE',
        supportedTypes: supportedTypes
      });
    }

    // S√©lectionner et appliquer le sch√©ma de validation appropri√©
    let validationSchema;
    let validationResult;

    switch (userType) {
      case 'player':
        validationSchema = playerRegistrationSchema;
        break;
        
      case 'coach':
        validationSchema = coachRegistrationSchema;
        break;
        
      case 'njcaa_coach':
        // NOUVEAU : Sch√©ma sp√©cialis√© pour les coachs NJCAA
        validationSchema = njcaaCoachRegistrationSchema;
        break;
        
      default:
        return res.status(400).json({
          status: 'error',
          message: `Validation schema not implemented for user type: ${userType}`,
          code: 'VALIDATION_SCHEMA_MISSING'
        });
    }

    // Effectuer la validation avec le sch√©ma s√©lectionn√©
    try {
      validationResult = await validationSchema.validateAsync(req.body, {
        abortEarly: false,
        stripUnknown: true
      });
    } catch (validationError) {
      console.log(`‚ùå Validation failed for ${userType}:`, validationError.details);
      
      return res.status(400).json({
        status: 'error',
        message: `${userType} registration validation failed`,
        code: 'REGISTRATION_VALIDATION_ERROR',
        errors: validationError.details.map(detail => ({
          field: detail.path.join('.'),
          message: detail.message,
          type: detail.type
        })),
        userType: userType
      });
    }

    // Effectuer des validations m√©tier suppl√©mentaires selon le type
    const businessValidation = await performBusinessValidation(userType, validationResult);
    if (!businessValidation.isValid) {
      return res.status(400).json({
        status: 'error',
        message: 'Business validation failed',
        code: 'BUSINESS_VALIDATION_ERROR',
        errors: businessValidation.errors,
        userType: userType
      });
    }

    // Remplacer les donn√©es de la requ√™te par les donn√©es valid√©es et enrichies
    req.body = validationResult;
    
    console.log(`‚úÖ Advanced validation successful for ${userType}`);
    next();

  } catch (error) {
    console.error('Advanced validation middleware error:', error);
    return res.status(500).json({
      status: 'error',
      message: 'Validation system error',
      code: 'VALIDATION_SYSTEM_ERROR'
    });
  }
};

/**
 * NOUVEAU : Validation m√©tier sp√©cialis√©e par type d'utilisateur
 * 
 * Cette fonction effectue des v√©rifications m√©tier complexes qui vont
 * au-del√† de la validation de format. Elle inclut maintenant la logique
 * sp√©cifique aux coachs NJCAA.
 */
const performBusinessValidation = async (userType, validatedData) => {
  const errors = [];

  try {
    switch (userType) {
      case 'player':
        // Validation m√©tier existante pour les joueurs
        const playerValidation = await validatePlayerBusinessRules(validatedData);
        if (!playerValidation.isValid) {
          errors.push(...playerValidation.errors);
        }
        break;

      case 'coach':
        // Validation m√©tier existante pour les coachs NCAA/NAIA
        const coachValidation = await validateCoachBusinessRules(validatedData);
        if (!coachValidation.isValid) {
          errors.push(...coachValidation.errors);
        }
        break;

      case 'njcaa_coach':
        // NOUVEAU : Validation m√©tier pour les coachs NJCAA
        const njcaaCoachValidation = await validateNJCAACoachBusinessRules(validatedData);
        if (!njcaaCoachValidation.isValid) {
          errors.push(...njcaaCoachValidation.errors);
        }
        break;
    }

    return {
      isValid: errors.length === 0,
      errors: errors
    };

  } catch (error) {
    console.error('Business validation error:', error);
    return {
      isValid: false,
      errors: [{
        field: 'general',
        message: 'Business validation system error'
      }]
    };
  }
};

/**
 * NOUVELLE FONCTION : Validation m√©tier sp√©cifique aux coachs NJCAA
 * 
 * Cette fonction impl√©mente les r√®gles m√©tier sp√©cifiques aux coachs NJCAA,
 * notamment la v√©rification de coh√©rence entre college et division.
 */
const validateNJCAACoachBusinessRules = async (data) => {
  const errors = [];
  const { NJCAACollege } = require('../models');

  try {
    // R√®gle 1 : V√©rifier la coh√©rence college-division pour NJCAA
    if (data.collegeId && data.division) {
      let actualCollegeId;
      
      // G√©rer les donn√©es enrichies par la validation Joi externe
      if (typeof data.collegeId === 'object' && data.collegeId.collegeId) {
        actualCollegeId = data.collegeId.collegeId;
      } else {
        actualCollegeId = data.collegeId;
      }

      try {
        const college = await NJCAACollege.findByPk(actualCollegeId);
        
        if (!college) {
          errors.push({
            field: 'collegeId',
            message: 'Selected NJCAA college does not exist'
          });
        } else if (!college.isActive) {
          errors.push({
            field: 'collegeId',
            message: 'Selected NJCAA college is not currently active'
          });
        } else {
          // Note : Si tu as des donn√©es de division par college,
          // tu peux ajouter ici une validation de coh√©rence
          // college.supportedDivisions.includes(data.division)
        }
      } catch (dbError) {
        errors.push({
          field: 'collegeId',
          message: 'Error validating NJCAA college'
        });
      }
    }

    // R√®gle 2 : V√©rifier la coh√©rence position-responsabilit√©s
    if (data.position && data.teamSport) {
      // Pour l'instant, toutes les combinaisons sont valides
      // Tu peux ajouter des r√®gles sp√©cifiques si n√©cessaire
    }

    // R√®gle 3 : Validation du num√©ro de t√©l√©phone selon le contexte g√©ographique
    if (data.phoneNumber && data.collegeId) {
      // Tu peux ajouter des validations de format de t√©l√©phone
      // selon la r√©gion du college si n√©cessaire
    }

    return {
      isValid: errors.length === 0,
      errors: errors
    };

  } catch (error) {
    console.error('NJCAA coach business validation error:', error);
    return {
      isValid: false,
      errors: [{
        field: 'general',
        message: 'NJCAA coach validation system error'
      }]
    };
  }
};

/**
 * NOUVEAU : Middleware de validation pour les √©valuations de joueurs
 * 
 * Ce middleware valide les donn√©es d'√©valuation selon les sp√©cifications
 * exactes que tu as fournies pour les coachs NJCAA.
 */
const validatePlayerEvaluation = async (req, res, next) => {
  try {
    console.log('üîç Validating player evaluation data...');

    // Importer le sch√©ma de validation des √©valuations
    const { playerEvaluationSchema } = require('./playerEvaluationValidation');

    // Effectuer la validation
    const { error, value } = playerEvaluationSchema.validate(req.body, {
      abortEarly: false,
      stripUnknown: true
    });

    if (error) {
      console.log('‚ùå Player evaluation validation failed:', error.details);
      
      return res.status(400).json({
        status: 'error',
        message: 'Player evaluation validation failed',
        code: 'EVALUATION_VALIDATION_ERROR',
        errors: error.details.map(detail => ({
          field: detail.path.join('.'),
          message: detail.message,
          type: detail.type
        }))
      });
    }

    // Validation m√©tier suppl√©mentaire pour les √©valuations
    const businessValidation = await validateEvaluationBusinessRules(value);
    if (!businessValidation.isValid) {
      return res.status(400).json({
        status: 'error',
        message: 'Evaluation business validation failed',
        code: 'EVALUATION_BUSINESS_ERROR',
        errors: businessValidation.errors
      });
    }

    // Remplacer les donn√©es de la requ√™te par les donn√©es valid√©es
    req.body = value;
    
    console.log('‚úÖ Player evaluation validation successful');
    next();

  } catch (error) {
    console.error('Player evaluation validation error:', error);
    return res.status(500).json({
      status: 'error',
      message: 'Evaluation validation system error',
      code: 'EVALUATION_VALIDATION_SYSTEM_ERROR'
    });
  }
};

/**
 * NOUVELLE FONCTION : Validation m√©tier pour les √©valuations
 * 
 * V√©rifie la coh√©rence et la qualit√© des donn√©es d'√©valuation.
 */
const validateEvaluationBusinessRules = async (evaluationData) => {
  const errors = [];

  try {
    // R√®gle 1 : V√©rifier la coh√©rence date de dipl√¥me
    if (evaluationData.expectedGraduationDate) {
      const currentYear = new Date().getFullYear();
      const gradYear = evaluationData.expectedGraduationDate;
      
      if (gradYear < currentYear) {
        errors.push({
          field: 'expectedGraduationDate',
          message: 'Expected graduation date cannot be in the past'
        });
      }
      
      if (gradYear > currentYear + 6) {
        errors.push({
          field: 'expectedGraduationDate',
          message: 'Expected graduation date cannot be more than 6 years in the future'
        });
      }
    }

    // R√®gle 2 : V√©rifier la qualit√© du contenu textuel
    const textFields = [
      'roleInTeam', 'performanceLevel', 'playerStrengths', 
      'improvementAreas', 'mentality', 'coachability', 
      'technique', 'physique', 'coachFinalComment'
    ];

    textFields.forEach(field => {
      if (evaluationData[field]) {
        const text = evaluationData[field].trim();
        
        // V√©rifier qu'il ne s'agit pas de texte g√©n√©rique ou inutile
        const genericPhrases = ['N/A', 'n/a', 'None', 'none', '...', 'TBD', 'tbd'];
        if (genericPhrases.includes(text)) {
          errors.push({
            field: field,
            message: `Please provide a meaningful assessment for ${field}`
          });
        }
        
        // V√©rifier la longueur minimale selon le champ
        const minLengths = {
          roleInTeam: 5,
          performanceLevel: 10,
          playerStrengths: 10,
          improvementAreas: 10,
          mentality: 10,
          coachability: 10,
          technique: 10,
          physique: 10,
          coachFinalComment: 20
        };
        
        if (text.length < minLengths[field]) {
          errors.push({
            field: field,
            message: `${field} requires at least ${minLengths[field]} characters for a meaningful assessment`
          });
        }
      }
    });

    return {
      isValid: errors.length === 0,
      errors: errors
    };

  } catch (error) {
    console.error('Evaluation business rules validation error:', error);
    return {
      isValid: false,
      errors: [{
        field: 'general',
        message: 'Evaluation business validation system error'
      }]
    };
  }
};

// Fonctions de validation m√©tier existantes (inchang√©es)
const validatePlayerBusinessRules = async (data) => {
  // Code existant pour la validation des joueurs
  // ... (impl√©mentation existante)
  return { isValid: true, errors: [] };
};

const validateCoachBusinessRules = async (data) => {
  // Code existant pour la validation des coachs NCAA/NAIA
  // ... (impl√©mentation existante)
  return { isValid: true, errors: [] };
};

module.exports = {
  validateRegistration, // MISE √Ä JOUR pour supporter njcaa_coach
  validatePlayerEvaluation, // NOUVEAU
  performBusinessValidation, // MISE √Ä JOUR
  validateNJCAACoachBusinessRules, // NOUVEAU
  validateEvaluationBusinessRules // NOUVEAU
};